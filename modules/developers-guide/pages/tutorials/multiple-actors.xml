<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Use multiple actors</title>
<date>2021-08-05</date>
</info>
<simpara>In this tutorial, you are going to create a project with multiple actors.
Currently, you can only define one actor in a Motoko file and a single actor is always compiled to a single canister.
You can, however, create <emphasis role="strong">projects</emphasis> that have multiple actors and can build multiple canisters from the same <literal>dfx.json</literal> configuration file.</simpara>
<simpara>For this tutorial, you are going to create separate program files for three actors in the same project.
This project defines the following unrelated actors:</simpara>
<itemizedlist>
<listitem>
<simpara>The <literal>assistant</literal> actor provides functions to add and show tasks in a to-do list.</simpara>
<simpara>For simplicity, the code sample for this tutorial only includes the functions to add to-do items and to show the current list of to-do items that have been added. A more complete version of this program—with additional functions for marking items as complete and removing items from the list—is available in the <link xl:href="https://github.com/dfinity/examples/">examples</link> repository as <link xl:href="https://github.com/dfinity/examples/tree/master/motoko/simple-to-do">Simple to-do checklist</link>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>rock_paper_scissors</literal> actor provides a function for determining a winner in a hard-coded rock-paper-scissors contest.</simpara>
<simpara>This code sample illustrates the basic use of <literal>switch</literal> and <literal>case</literal> in a Motoko program with hard-coded players and choices.</simpara>
</listitem>
<listitem>
<simpara>The <literal>daemon</literal> actor provides mock functions for starting and stopping a daemon.</simpara>
<simpara>This code sample simply assigns a variable and prints messages for demonstration purposes.</simpara>
</listitem>
</itemizedlist>
<section xml:id="_before_you_begin">
<title>Before you begin</title>
<simpara>Before starting the tutorial, verify the following:</simpara>
<itemizedlist>
<listitem>
<simpara>You have downloaded and installed the {sdk-short-name} package as described in <link xl:href="../../quickstart/local-quickstart.xml#download-and-install">Download and install</link>.</simpara>
</listitem>
<listitem>
<simpara>You have stopped any Internet Computer network processes running on the local
computer.</simpara>
</listitem>
</itemizedlist>
<simpara>This tutorial takes approximately 20 minutes to complete.</simpara>
</section>
<section xml:id="_create_a_new_project">
<title>Create a new project</title>
<simpara>To create a new project for this tutorial:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open a terminal shell on your local computer, if you don’t already have one open.</simpara>
</listitem>
<listitem>
<simpara>Change to the folder you are using for your Internet Computer projects, if you are using one.</simpara>
</listitem>
<listitem>
<simpara>Create a new project by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx new multiple_actors</programlisting>
</listitem>
<listitem>
<simpara>Change to your project directory by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">cd multiple_actors</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="_modify_the_default_configuration">
<title>Modify the default configuration</title>
<simpara>You have already seen that creating a new project adds a default <literal>dfx.json</literal> configuration file to your project directory.
For this tutorial, you need to add sections to this file to specify the location of each program that defines an actor you want to build.</simpara>
<simpara>To modify the default <literal>dfx.json</literal> configuration file:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open the <literal>dfx.json</literal> configuration file in a text editor, then change the default <literal>multiple_actors</literal> canister name and source directory to <literal>assistant</literal>.</simpara>
<simpara>For example, under the <literal>canisters</literal> key:</simpara>
<programlisting language="json" linenumbering="unnumbered">    "assistant": {
      "main": "src/assistant/main.mo",
      "type": "motoko"
    },</programlisting>
<simpara>Because you are going to add settings to this <literal>canisters</literal> section of the configuration file, you must also add a <emphasis role="strong">comma</emphasis> after the curly brace that encloses the location of the <literal>assistant</literal> main source code file and the canister type.</simpara>
</listitem>
<listitem>
<simpara>Remove the <literal>multiple_actors_assets</literal> section from the file.</simpara>
</listitem>
<listitem>
<simpara>Add a new canister name, source code location, and canister type for the <literal>rock_paper_scissors</literal> program and a new canister name, source code location, and canister type for the <literal>daemon</literal> program files below the <literal>assistant</literal> canister definition.</simpara>
<simpara>After making the changes, the <literal>canisters</literal> section of the <literal>dfx.json</literal> file should look similar to this:</simpara>
<programlisting language="json" linenumbering="unnumbered">Unresolved directive in multiple-actors.adoc - include::example$multiple-actors/dfx.json[]</programlisting>
<simpara>You can leave the other sections as-is.</simpara>
</listitem>
<listitem>
<simpara>Save your changes and close the <literal>dfx.json</literal> file to continue.</simpara>
</listitem>
<listitem>
<simpara>Change the name of the default source file directory to match the name specified in the <literal>dfx.json</literal> configuration file by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">cp -r src/multiple_actors/ src/assistant/</programlisting>
</listitem>
<listitem>
<simpara>Copy the <literal>assistant</literal> source file directory to create the main program file for the <literal>rock_paper_scissors</literal> actor by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">cp -r src/assistant/ src/rock_paper_scissors/</programlisting>
</listitem>
<listitem>
<simpara>Copy the <literal>assistant</literal> source file directory to create the main program file for the <literal>daemon</literal> actor by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">cp -r src/assistant/ src/daemon/</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="_modify_the_default_programs">
<title>Modify the default programs</title>
<simpara>You now have three separate directories in the <literal>src</literal> directory, each with a template <literal>main.mo</literal> file.
For this tutorial, you will replace the content in each template <literal>main.mo</literal> file with a different actor.</simpara>
<simpara>To modify the default source code:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open the <literal>src/assistant/main.mo</literal> file in a text editor and delete the existing content.</simpara>
</listitem>
<listitem>
<simpara>Copy and paste the following sample code into the file:</simpara>
<programlisting role="copy" language="motoko" linenumbering="numbered">Unresolved directive in multiple-actors.adoc - include::example$multiple-actors/assistant/main.mo[]</programlisting>
</listitem>
<listitem>
<simpara>Save your changes and close the <literal>main.mo</literal> file to continue.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>src/rock_paper_scissors/main.mo</literal> file in a text editor and delete the existing content.</simpara>
</listitem>
<listitem>
<simpara>Copy and paste the following sample code into the file:</simpara>
<programlisting role="copy" language="motoko" linenumbering="numbered">Unresolved directive in multiple-actors.adoc - include::example$multiple-actors/rock_paper_scissors/main.mo[]</programlisting>
</listitem>
<listitem>
<simpara>Save your changes and close the <literal>main.mo</literal> file to continue.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>src/daemon/main.mo</literal> file in a text editor and delete the existing content.</simpara>
</listitem>
<listitem>
<simpara>Copy and paste the following sample code into the file:</simpara>
<programlisting role="copy" language="motoko" linenumbering="numbered">Unresolved directive in multiple-actors.adoc - include::example$multiple-actors/daemon/main.mo[]</programlisting>
</listitem>
<listitem>
<simpara>Save your changes and close the <literal>main.mo</literal> file to continue.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="_start_the_local_network">
<title>Start the local network</title>
<simpara>Before you can build the <literal>multiple_actors</literal> project, you need to connect to the Internet Computer network either running locally in your development environment or running remotely on a subnet that you can access.</simpara>
<simpara>To start the network locally:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Open a new terminal window or tab on your local computer.</simpara>
</listitem>
<listitem>
<simpara>Navigate to the root directory for your project, if necessary.</simpara>
</listitem>
<listitem>
<simpara>Start the Internet Computer network on your local computer by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx start</programlisting>
</listitem>
<listitem>
<simpara>Leave the terminal that displays network operations open and switch your focus to your original terminal where you created your new project.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="_register_build_and_deploy_your_application">
<title>Register, build, and deploy your application</title>
<simpara>After you connect to the Internet Computer network running locally in your development environment, you can register, build, and deploy your multi-canister application locally.</simpara>
<simpara>To deploy the application locally:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Check that you are still in the root directory for your project, if needed.</simpara>
</listitem>
<listitem>
<simpara>Register, build, and deploy the application by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx deploy</programlisting>
<simpara>If you have access to the Internet Computer running remotely, you can deploy to the that network instead of deploying locally by specifying the <literal>--network</literal> option and the network alias configured in the <literal>dfx.json</literal> file.
For example, if you are connecting to the URL specified by the network alias <literal>ic</literal> you would run a command similar the following:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx deploy --network ic</programlisting>
<simpara>The <literal>dfx deploy</literal> command output displays information about the operations it performs.
For example, the command displays the network-specific canister identifiers for the three canisters defined in the <literal>dfx.json</literal> configuration file.</simpara>
<literallayout class="monospaced">Deploying all canisters.
Creating canisters...
Creating canister "assistant"...
"assistant" canister created with canister id: "75hes-oqbaa-aaaaa-aaaaa-aaaaa-aaaaa-aaaaa-q"
Creating canister "daemon"...
"daemon" canister created with canister id: "cxeji-wacaa-aaaaa-aaaaa-aaaaa-aaaaa-aaaaa-q"
Creating canister "rock_paper_scissors"...
"rock_paper_scissors" canister created with canister id: "7kncf-oidaa-aaaaa-aaaaa-aaaaa-aaaaa-aaaaa-q"</literallayout>
</listitem>
</orderedlist>
</section>
<section xml:id="_verify_deployment_by_calling_functions">
<title>Verify deployment by calling functions</title>
<simpara>You now have three programs deployed as a <emphasis role="strong">canisters</emphasis> on your local replica network and can test each program by using <literal>dfx canister call</literal> commands.</simpara>
<simpara>To test the programs you have deployed:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Use the <literal>dfx canister call</literal> command to call the canister <literal>assistant</literal> using the <literal>addTodo</literal> function and pass it the task you want to add by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx canister call assistant addTodo '("Schedule monthly demos")'</programlisting>
</listitem>
<listitem>
<simpara>Verify that the command returns the to-do list item using the <literal>showTodos</literal> function by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx canister call assistant showTodos</programlisting>
<simpara>The command returns output similar to the following:</simpara>
<literallayout class="monospaced">("
___TO-DOs___
(1) Schedule monthly demos")</literallayout>
</listitem>
<listitem>
<simpara>Use the <literal>dfx canister call</literal> command to call the canister <literal>rock_paper_scissors</literal> using the <literal>contest</literal> function by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx canister call rock_paper_scissors contest</programlisting>
<simpara>The command returns the result of the hard-coded contest similar to the following:</simpara>
<literallayout class="monospaced">("Bob won")</literallayout>
</listitem>
<listitem>
<simpara>Use the <literal>dfx canister call</literal> command to call the canister <literal>daemon</literal> using the <literal>launch</literal> function by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx canister call daemon launch</programlisting>
</listitem>
<listitem>
<simpara>Verify the mock <literal>launch</literal> function returns "The daemon process is running" message":</simpara>
<literallayout class="monospaced">(""The daemon process is running"")</literallayout>
</listitem>
</orderedlist>
</section>
<section xml:id="_stop_the_local_network">
<title>Stop the local network</title>
<simpara>After you finish experimenting with your program, you can stop the local Internet Computer network so that it doesn’t continue running in the background.</simpara>
<simpara>To stop the local network:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In the terminal that displays network operations, press Control-C to interrupt the local network process.</simpara>
</listitem>
<listitem>
<simpara>Stop the Internet Computer network by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx stop</programlisting>
</listitem>
</orderedlist>
</section>
</article>