---
date: 2021-08-05
title: dfx deploy
---

Use the `dfx deploy` command to register, build, and deploy an
application locally or on a specified network. By default, all canisters
defined in the project `dfx.json` configuration file are deployed.

This command simplifies the developer workflow by enabling you to run
one command instead of running the following commands as separate steps:

    dfx canister create --all
    dfx build
    dfx canister install --all

Note that you can only run this command from within the project
directory structure. For example, if your project name is `hello_world`,
your current working directory must be the `hello_world` top-level
project directory or one of its subdirectories.

# Basic usage {#_basic_usage}

``` bash
dfx deploy [flag] [option] [canister_name]
```

# Flags {#_flags}

You can use the following optional flags with the `dfx deploy` command.

+----------------------+-----------------------------------------------+
| Flag                 | Description                                   |
+======================+===============================================+
| `-h`, `--help`       | Displays usage information.                   |
+----------------------+-----------------------------------------------+
| `-V`, `--version`    | Displays version information.                 |
+----------------------+-----------------------------------------------+

# Options {#_options}

You can use the following options with the `dfx deploy` command.

+----------------------+-----------------------------------------------+
| Option               | Description                                   |
+======================+===============================================+
| `                    | Overrides the network to connect to. By       |
| --network <network>` | default, the local network is used.           |
+----------------------+-----------------------------------------------+
| `--                  | Specifies an argument using Candid syntax to  |
| argument <argument>` | pass to the canister during deployment. Note  |
|                      | that this option requires you to define an    |
|                      | actor class in the {proglang} program.        |
+----------------------+-----------------------------------------------+
| `--with-cycles       | Enables you to specify the initial number of  |
|  <number-of-cycles>` | cycles for a canister in a project.           |
+----------------------+-----------------------------------------------+

## Arguments {#_arguments}

You can specify the following arguments for the `dfx deploy` command.

+------------------------+---------------------------------------------+
| Argument               | Description                                 |
+========================+=============================================+
| `canister_name`        | Specifies the name of the canister you want |
|                        | to register, build, and deploy. Note that   |
|                        | the canister name you specify must match at |
|                        | least one name in the `canisters` section   |
|                        | of the `dfx.json` configuration file for    |
|                        | the project. If you don't specify a         |
|                        | canister name, `dfx deploy` will deploy all |
|                        | canisters defined in the `dfx.json` file.   |
+------------------------+---------------------------------------------+

# Examples {#_examples}

You can use the `dfx deploy` command to deploy all or specific canisters
locally or on a specified network.

For example, to deploy the `hello` project on the `ic-pubs` network
provider configured in the `dfx.json` configuration file, you can run
the following command:

``` bash
dfx deploy hello --network ic-pubs
```

To deploy a project locally and pass a single argument to the
installation step, you can run a command similar to the following:

``` bash
dfx deploy hello_actor_class --argument '("from DFINITY")'
```

Note that currently you must use an actor class in your {proglang}
program. In this example, the `dfx deploy` command specifies an argument
to pass to the `hello_actor_class` canister. The main program for the
`hello_actor_class` canister looks like this:

    actor class Greet(name: Text) {
        public query func greet() : async Text {
            return "Hello, " # name # "!";
        };
    };

You can use the `dfx deploy` command with the `--with-cycles` option to
specify the initial balance of a canister created by your wallet. If you
don't specify a canister, the number of cycles you specify will be added
to all canisters by default. To avoid this, specify a specific canister
by name. For example, to add an initial balance of 8000000000000 cycles
to a canister called \"hello-assets\", run the following command:

``` bash
dfx deploy --with-cycles 8000000000000 hello-assets
```
