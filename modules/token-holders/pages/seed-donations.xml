<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Neuron/ICP Instructions for Seed Participants</title>
<date>2021-08-05</date>
</info>
<simpara>THANK YOU for being a Seed participant.</simpara>
<simpara>You have been granted ICP at a rate of 30 tokens per Swiss Franc of value donated in 2017, which Genesis Unlock is disbursing in the form of a basket of 49 voting neurons.</simpara>
<simpara>These neurons already exist inside the Network Nervous System, the completely open, tokenized governance system that controls the Internet Computer blockchain network. Your neurons contain the ICP you have been awarded, staked inside. Your neurons have been configured to vote automatically and are already earning voting rewards for you. You do not need to do anything to initialize your neurons in order to continue earning voting rewards.</simpara>
<simpara>A neuron is like a savings account where you must provide notice of withdrawals. The configured notice period is called the “dissolve delay”. You can start and stop dissolving a neuron at any time. The greater the dissolve delay, the greater the neuron’s voting power, and the greater the voting rewards it receives.</simpara>
<simpara>We are pleased to inform you that your neurons have been pre-aged! At the moment of Genesis Unlock, their age was already set to 18 months old. This is important, because neuron age significantly increases your voting power and the voting rewards you receive.</simpara>
<warning>
<simpara>When you start dissolving a neuron, the blockchain will reset its age to zero immediately. Therefore, be very careful to only begin dissolving neurons when you wish to unstake the ICP inside.</simpara>
</warning>
<simpara>Genesis Unlock created 49 neurons for you. They have dissolve delays of 0 days, 30 days, 60 days, 90 days and so on. Apart from the first neuron which has a dissolve delay of 0 days (which can be dissolved immediately), the other dissolve delays may have a small random number of days either added or removed.</simpara>
<simpara>To configure one of your neurons, for example to change how it votes, or to place it into dissolving mode, follow these steps:</simpara>
<warning>
<simpara>This process is not currently possible on macOS computers with M1 chips. You can only install the {sdk-short-name} <literal>dfx</literal> and the Candid compiler <literal>didc</literal> on Intel-based macOS and Linux computers.</simpara>
</warning>
<orderedlist numeration="arabic">
<listitem>
<simpara><xref linkend="_derive_a_native_internet_computer_principal_from_your_ethereum_seed"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="_take_control_of_your_neurons"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="_enable_disbursal_by_passing_the_kyc_process"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="_instruct_the_neurons_you_wish_to_unstake_to_dissolve"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="_disburse_icp_from_neurons_that_are_fully_dissolved"/></simpara>
</listitem>
</orderedlist>
<section xml:id="_derive_a_native_internet_computer_principal_from_your_ethereum_seed">
<title>Derive a native Internet Computer principal from your Ethereum seed</title>
<simpara>As an early contributor or seed donor, you wrote down a 12-word mnemonic seed phrase that was generated by the DFINITY Chrome extension. To create an identity, you must derive a private key from your seed phrase and import that private key into the DFINITY Canister SDK. This step is required before you can <xref linkend="_take_control_of_your_neurons"/>.</simpara>
<section xml:id="_secure_your_environment">
<title>Secure your environment</title>
<simpara>The safety and security of your private key is your responsibility and there is no substitute for planning ahead, bringing the right equipment, having the right skills, and using good judgment. We strongly recommend you proceed using an <emphasis role="strong">air-gapped computer</emphasis> to reduce the risk of having your private key compromised. Depending on the hardware available, you might want to physically remove your network controller, microphone, speakers, and other components, or disable them in your BIOS. Covert channels can be established through a variety of different mediums, including sound, light, radio-frequency, and physical media. Be sure to evaluate the capabilities of your system before settling on a configuration that makes sense for you. If you don’t know what you are doing, you should consult with a computer security expert. Do not contact the DFINITY Foundation for help with securing your environment.</simpara>
</section>
<section xml:id="_install_keysmith">
<title>Install Keysmith</title>
<simpara>You need <link xl:href="https://github.com/dfinity/keysmith">Keysmith</link> to derive your private/public key pair from you seed phrase.</simpara>
<simpara>To install Keysmith, you must either <xref linkend="_fetch_the_release_binary"/> or <xref linkend="_build_keysmith_from_source"/>.</simpara>
<section xml:id="_fetch_the_release_binary">
<title>Fetch the release binary</title>
<simpara>If you want to download the Keysmith release binary, keep in mind that you must perform this action on a computer with a network connection. If you are using an air-gapped computer, then you must copy the release binary from your networked computer to your air-gapped computer. How you do this will depend on your configuration.</simpara>
<simpara>To download the Keysmith release binary, fetch release <link xl:href="https://github.com/dfinity/keysmith/releases/tag/v1.5.0">v1.5.0</link> from Github.</simpara>
<simpara>Keysmith supports the following operating systems and architectures:</simpara>
<itemizedlist>
<listitem>
<simpara>Darwin / AMD64 – for macOS models with an Intel chip (<link xl:href="https://www.howtogeek.com/706226/how-to-check-if-your-mac-is-using-an-intel-or-apple-silicon-processor/#:~:text=Here%2C%20you&#8217;ll%20find%20the,Mac%20with%20an%20Intel%20chip.">how to check</link>)</simpara>
</listitem>
<listitem>
<simpara>Darwin / ARM64 – for newer macOS models with an M1 chip (<link xl:href="https://www.howtogeek.com/706226/how-to-check-if-your-mac-is-using-an-intel-or-apple-silicon-processor/#:~:text=Here%2C%20you&#8217;ll%20find%20the,Mac%20with%20an%20Intel%20chip.">how to check</link>)</simpara>
</listitem>
<listitem>
<simpara>Linux / AMD64</simpara>
</listitem>
<listitem>
<simpara>Linux / ARM32</simpara>
</listitem>
<listitem>
<simpara>Linux / ARM64</simpara>
</listitem>
<listitem>
<simpara>Windows / AMD64</simpara>
</listitem>
</itemizedlist>
<simpara>Download the <literal>.tar.gz</literal> file matching your architecture and operating system.
If you have a newer M1-based macOS, download <literal>keysmith-darwin-arm64.tar.gz</literal>.
Although you can install <literal>keysmith</literal> on macOS computers with an M1 chip, you can only install the {sdk-short-name} <literal>dfx</literal> command-line interface on Intel-based macOS computers.
For an Intel-based macOS, download <literal>keysmith-darwin-amd64.tar.gz</literal>.</simpara>
</section>
<section xml:id="_verify_the_sha256_checksum_of_your_download">
<title>Verify the SHA256 checksum of your download</title>
<simpara>Open a terminal and change to the download directory. On a Mac this is</simpara>
<programlisting language="bash" linenumbering="unnumbered">cd ~/Downloads</programlisting>
<simpara>Compute the SHA256 checksum of your download.</simpara>
<programlisting language="bash" linenumbering="unnumbered">openssl dgst -sha256 keysmith-*.tar*</programlisting>
<simpara>Make sure the output matches one of the following lines:</simpara>
<literallayout class="monospaced">SHA256(keysmith-darwin-amd64.tar.gz)= ad7383d60bced19580fa37b77e133b1e80416b482e4c5326ac2fd17a7710a318
SHA256(keysmith-darwin-arm64.tar.gz)= da1a4ac5ae04b85d4c5b0a3deb6442fb7c456dcf97cbd6ff8153316c5dbb29a9
SHA256(keysmith-linux-amd64.tar.gz)= 7901c3a23aef298f930d1dddf8eee23bc51a55ffda670accfd7b9e37748913d8
SHA256(keysmith-linux-arm32.tar.gz)= 0ab44e74cc502aa653dcb28962bcada5cbefb9e0ec41853a03fb4745c5cd51a9
SHA256(keysmith-linux-arm64.tar.gz)= 635c0bf98dd15f27b302ec0ea793f75c797441009c74500bd9d0a5df26092264
SHA256(keysmith-windows-amd64.tar.gz)= cb398c39583b81d5170dd0a9539d902715317572f6a640b45d3d2db01946b8fa</literallayout>
<simpara>If your browser already unzipped the <literal>.tar.gz</literal> for you and you have a file ending in <literal>.tar</literal> then make sure the output of <literal>openssl</literal> matches one of the following lines:</simpara>
<literallayout class="monospaced">SHA256(keysmith-darwin-amd64.tar)= 97b8048f00e75d6adc8651aac1aa77d9bd9c150b0dbc0b0f6409f0d6bdbb24a4
SHA256(keysmith-darwin-arm64.tar)= 07e296fbf33b0c06bd04a8ead30487762aa30ca2daf7e19948d74a96f2c34067
SHA256(keysmith-linux-amd64.tar)= 1d2d986a971f8c7ef0eeb4b01624f023ef8dc9c71d2f0127f21fcc99aebdc99a
SHA256(keysmith-linux-arm32.tar)= 8eb8efecd9182822326f2e60fcff32c0b1541cce206a12b3f2e94547c66dfe63
SHA256(keysmith-linux-arm64.tar)= 82264487e83cbfdd758c1227375758b7d1f0c864adb555775777e7d3afa19e08
SHA256(keysmith-windows-amd64.tar)= b85224d4e9807b8335295193c12dd0cab22bd38881d14c1f1c21479801ace17d</literallayout>
</section>
<section xml:id="_unpack_and_install_keysmith">
<title>Unpack and install keysmith</title>
<simpara>To extract the executable from the tarball, enter the following command into your terminal:</simpara>
<programlisting language="bash" linenumbering="unnumbered">tar -f keysmith-*.tar* -x</programlisting>
<simpara>Next, add the executable to your PATH by entering the commands below:</simpara>
<programlisting language="bash" linenumbering="unnumbered">sudo install -d /usr/local/bin
sudo install keysmith /usr/local/bin</programlisting>
<simpara>You will be prompted to enter your laptop password.
The password itself will not appear, simply type it and press enter.</simpara>
</section>
<section xml:id="_run_it">
<title>Run it</title>
<programlisting language="bash" linenumbering="unnumbered">keysmith</programlisting>
<simpara>You should see:</simpara>
<literallayout class="monospaced">usage: keysmith &lt;command&gt; [&lt;args&gt;]

Available Commands:
    account             Print your account identifier.
    generate            Generate your mnemonic seed.
    legacy-address      Print your legacy address.
    principal           Print your principal identifier.
    private-key         Write your private key to a file.
    public-key          Print your public key.
    version             Print the version number.
    x-public-key        Print your extended public key.</literallayout>
<simpara>If you are using macOS, making the <literal>keysmith</literal> binary executable might require you to change a permission setting using System Preferences &gt; Security &amp; Privacy &gt; General.</simpara>
</section>
<section xml:id="_build_keysmith_from_source">
<title>Build Keysmith from source</title>
<simpara>If you want to build the Keysmith from source, keep in mind that you must perform this action on a computer with a network connection. If you are using an air-gapped computer, then you must copy the target binary from your networked computer to your air-gapped computer. How you do this will depend on your configuration.</simpara>
<simpara>Keysmith is written in <link xl:href="https://golang.org">Go</link>, so if you choose to build it from source, then you must first <link xl:href="https://golang.org/dl">download</link> and install Go, verify that <literal>go</literal> is in your <literal>PATH</literal>, and configure your <literal>GOPATH</literal> and <literal>GOBIN</literal> environment variables.</simpara>
<simpara>Run the following command to build Keysmith from source.</simpara>
<programlisting language="bash" linenumbering="unnumbered">go get github.com/dfinity/keysmith</programlisting>
</section>
</section>
<section xml:id="_install_the_dfinity_canister_sdk">
<title>Install the DFINITY Canister SDK</title>
<simpara>You can install the DFINITY Canister SDK by fetching the <literal>v0.7.0</literal> release binary from our <link xl:href="https://sdk.dfinity.org">website</link>. It is not yet possible to build the DFINITY Canister SDK from source.
Note that this action can only be performed on a networked computer. If you are using an air-gapped computer, then you must copy the release binary from your networked computer to your air-gapped computer. How you do this will depend on your configuration.</simpara>
<simpara>Run the following command to install the DFINITY Canister SDK.</simpara>
<programlisting language="bash" linenumbering="unnumbered">sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"</programlisting>
<simpara><emphasis role="strong">Warning: Note that <literal>dfx</literal> will currently not install on M1-based Macs.</emphasis></simpara>
</section>
<section xml:id="_set_your_seed_phrase_for_use_with_keysmith">
<title>Set your seed phrase for use with keysmith</title>
<simpara>Once you have installed Keysmith and the DFINITY Canister SDK, and you are <phrase role="underline">confident that your environment is secure</phrase>, then you are ready to enter your seed for use with <literal>keysmith</literal>.
For the duration of your session, you store your seed phrase in an environment variable.
It will be eliminated from your system when you turn your computer off.</simpara>
<programlisting language="bash" linenumbering="unnumbered">read seed</programlisting>
<simpara>Enter your seed phrase and finish with Return.</simpara>
<simpara>If you prefer to not have your seed phrase displayed as you type then use this command instead:</simpara>
<programlisting language="bash" linenumbering="unnumbered">read -s seed</programlisting>
</section>
<section xml:id="_check_your_legacy_address_and_balance_optional">
<title>Check your legacy address and balance (optional)</title>
<simpara>At this point you can already verify your legacy address and ICPT balance.
The legacy address matches to what was formerly called "DFN address" in the Dfinity Chrome extension.
You may have copied it from the Chrome extension for your records back when you used the extension.</simpara>
<programlisting language="bash" linenumbering="unnumbered">echo $seed | keysmith legacy-address -f -</programlisting>
<simpara>The output is a 40 character hex string. It looks something like this:</simpara>
<literallayout class="monospaced">2d89d96b10f7a9456a9154b2f5309ee70df5bce1</literallayout>
<simpara>You can check your ICPT balance as follows:</simpara>
<programlisting language="bash" linenumbering="unnumbered">echo {} &gt; dfx.json
GTC=renrk-eyaaa-aaaaa-aaada-cai
ADDR=$(echo $seed | keysmith legacy-address -f -)
dfx canister --network=https://ic0.app --no-wallet call $GTC balance '("'$ADDR'")'</programlisting>
<simpara>The output is the number of ICPT associated with your address.</simpara>
<simpara>If you are an early contributor then you may have multiple addresses, all derived from your one seed phrase. To check the balance in each of them you do the following commands:</simpara>
<programlisting language="bash" linenumbering="unnumbered">GTC=renrk-eyaaa-aaaaa-aaada-cai
ADDR=$(echo $seed | keysmith legacy-address -f - -i 0)
dfx canister --network=https://ic0.app --no-wallet call $GTC balance '("'$ADDR'")'</programlisting>
<simpara>Then you repeat the last two lines with <literal>-i 1</literal>, <literal>-i 2</literal>, etc.</simpara>
</section>
<section xml:id="_derive_and_import_your_private_key">
<title>Derive and import your private key</title>
<simpara>Derive your private key from your seed phrase.</simpara>
<programlisting language="bash" linenumbering="unnumbered">echo $seed | keysmith private-key -f -</programlisting>
<simpara>This creates a file <literal>identity.pem</literal> containing your private key.
Import your private key(s) into the DFINITY Canister SDK and then remove it from the filesystem.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx identity import &lt;name&gt; identity.pem
rm identity.pem</programlisting>
<simpara>Here, &lt;name&gt; is an alias that you can choose arbitrarily for your identity, e.g. "jane".
The command above displays output similar to the following:</simpara>
<literallayout class="monospaced">Creating identity: "jane".
Created identity: "jane".</literallayout>
<simpara>Make your new identity the currently-active one.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx identity use &lt;name&gt;</programlisting>
<simpara>The command above displays output similar to the following:</simpara>
<literallayout class="monospaced">Using identity: "jane".</literallayout>
<simpara>At any time, you can list all available identities with</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx identity list</programlisting>
</section>
</section>
<section xml:id="_take_control_of_your_neurons">
<title>Take control of your neurons</title>
<simpara>You will receive your tokens inside a set of neurons that have been pre-created for you.
The number of neurons will total 31 or 49 depending on whether you are an early contributor or seed donor, respectively.
Your tokens are disbursed equally over these neurons.
Claiming your neurons is the process of obtaining control over your neurons.
It is done for all neurons at once.</simpara>
<simpara>Your neurons differ by their dissolve delay.
For an explanation of dissolve delay see <xref linkend="_instruct_the_neurons_you_wish_to_unstake_to_dissolve"/> below.</simpara>
<simpara>To claim your neurons, you need to sign and send a message to the Genesis Token Canister. You can accomplish this in one step on a networked computer using <literal>dfx canister call</literal>, or as two separate steps, one on an air-gapped computer using <literal>dfx canister sign</literal>, and another on a networked computer using <literal>dfx canister send</literal>. We strongly recommend the latter approach to reduce the risk of having your private key compromised.</simpara>
<simpara>Regardless of which method you choose, you will need to download and install <literal>didc</literal>, the Candid compiler, on your networked computer. You can find the latest release <link xl:href="https://github.com/dfinity/candid/releases">here</link>. Note that the binaries are suffixed by the operating systems they run on, <literal>didc-linux64</literal> and <literal>didc-macos</literal>. Be sure to download the correct one. Below are commands to install <literal>didc</literal> on <literal>macos</literal>. If your&#8217;re using Linux, simply use the <literal>linux64</literal> suffix instead.</simpara>
<programlisting language="bash" linenumbering="unnumbered">sudo install -d /usr/local/bin
sudo install -m 0755 ~/Downloads/didc-macos /usr/local/bin/didc</programlisting>
<simpara>Regardless of which method you choose, you will also need to download and extract the NNS canister interfaces on your networked computer. You can find the latest release <link xl:href="https://github.com/dfinity/nns-ifaces/archive/refs/tags/v0.8.0.tar.gz">here</link>. Below are commands to extract the NNS canister interfaces.</simpara>
<programlisting language="bash" linenumbering="unnumbered">pushd ~/Downloads
tar -f nns-ifaces-0.8.0.tar.gz -x
popd</programlisting>
<simpara>Additionally, you will need to have <literal>dfx.json</literal> file available in the directory from which you are running <literal>dfx</literal> commands. You can create an empty <literal>dfx.json</literal> file in your current directory by running the following command.</simpara>
<programlisting language="bash" linenumbering="unnumbered">echo {} &gt; dfx.json</programlisting>
<simpara>Note that if you&#8217;re using an air-gapped computer, then you&#8217;ll need to repeat this step since you&#8217;ll be running <literal>dfx</literal> commands in both places.</simpara>
<simpara>After downloading and installing <literal>didc</literal>, downloading and extracting the NNS canister interfaces, and creating your <literal>dfx.json</literal> file(s), you can <xref linkend="_claim_in_one_step_not_recommended"/> or <xref linkend="_claim_in_two_steps"/>.</simpara>
<section xml:id="_claim_in_one_step_not_recommended">
<title>Claim in one step (not recommended)</title>
<simpara>Verify that you can connect to the Internet Computer.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx ping https://ic0.app</programlisting>
<simpara>Derive your public key.</simpara>
<programlisting language="bash" linenumbering="unnumbered">PUBLIC_KEY="$(echo $seed | keysmith public-key -f -)"</programlisting>
<simpara>Call the Genesis Token Canister to claim your neurons.</simpara>
<programlisting language="bash" linenumbering="unnumbered">CANISTER=renrk-eyaaa-aaaaa-aaada-cai
RESULT="$(dfx canister --network=https://ic0.app --no-wallet call $CANISTER claim_neurons '("'$PUBLIC_KEY'")' --output=raw)"
didc decode -t "(Result)" -d ~/Downloads/nns-ifaces-0.8.0/genesis_token.did $RESULT</programlisting>
</section>
<section xml:id="_claim_in_two_steps">
<title>Claim in two steps</title>
<section xml:id="_on_your_air_gapped_computer">
<title>On your air-gapped computer</title>
<simpara>Derive your public key.</simpara>
<programlisting language="bash" linenumbering="unnumbered">PUBLIC_KEY="$(echo $seed | keysmith public-key -f -)"</programlisting>
<simpara>Sign a message to claim your neurons.</simpara>
<simpara>Note that the time allotted to send a signed message is a fixed <emphasis role="strong">5-minute window</emphasis>. The <literal>--expire-after</literal> option enables you to specify the point in time when the 5-minute window for sending the signed message should end. For example, if you set the <literal>--expire-after</literal> option to one hour (<literal>1h</literal>), then you must wait at least 55 minutes before you send the generated message and the signature for the message is only valid during the 5-minute window ending in the 60th minute. Hence, you would need to send the message after 55 minutes and before 60 minutes for the message to be recognized as valid. If you don&#8217;t specify the <literal>--expire-after</literal> option, then the default expiration is five minutes.</simpara>
<programlisting language="bash" linenumbering="unnumbered">CANISTER=renrk-eyaaa-aaaaa-aaada-cai
dfx canister --network=https://ic0.app --no-wallet sign --expire-after=1h $CANISTER claim_neurons '("'$PUBLIC_KEY'")'</programlisting>
<simpara>The command above results in a <literal>message.json</literal> file in your current directory. You must copy that file from your air-gapped computer to your networked computer. How you do this will depend on your configuration.</simpara>
</section>
<section xml:id="_on_your_networked_computer">
<title>On your networked computer</title>
<simpara>Verify that you can connect to the Internet Computer.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx ping https://ic0.app</programlisting>
<simpara>Send the signed message to the Genesis Token Canister to claim your neurons. As previously mentioned, you can only perform this action within the 5-minute window that you specified.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx canister --network=https://ic0.app --no-wallet send message.json</programlisting>
<simpara>Unlike <literal>dfx canister call</literal> in the section <xref linkend="Claim in one step"/>, the command <literal>dfx canister send</literal> does not return output that can be parsed by <literal>didc</literal>.
Instead, it outputs only a request id.</simpara>
<simpara>In order to see the effect of your <literal>send</literal> request, you have to do an additional step.
Perform the following commands on your networked machine:</simpara>
<programlisting language="bash" linenumbering="unnumbered">CANISTER=renrk-eyaaa-aaaaa-aaada-cai
RESULT="$(dfx canister --network=https://ic0.app --no-wallet call $CANISTER get_account '("paste legacy address here")' --output=raw)"
didc decode -t "(Result_2)" -d ~/Downloads/nns-ifaces-0.8.0/genesis_token.did $RESULT</programlisting>
<simpara>The legacy address to paste here in the second line above is what was formerly called "DFN address" in the Chrome extension.
Note that the legacy address must be pasted without the <literal>0x</literal> prefix and without the 8-character checksum at the end, i.e. it has exactly 40 characters in length.
Furthermore, the legacy address must be in all lowercase.
If you don&#8217;t remember it then you can obtain your legacy address by running this on your air-gapped machine:</simpara>
<programlisting language="bash" linenumbering="unnumbered">echo $seed | keysmith legacy-address -f -</programlisting>
<simpara>What you want to look for in the output of the <literal>get_account</literal> request is <literal>has_claimed = true</literal> and your principal.
For example, the output of the <literal>get_account</literal> command looks like this for an unclaimed account:</simpara>
<literallayout class="monospaced">(
  variant {
    Ok = record {
      authenticated_principal_id = null;
      successfully_transferred_neurons = vec {};
      has_donated = false;
      failed_transferred_neurons = vec {};
      neuron_ids = vec { record { id = 1_234_567_890_123_456_789 : nat64;}; ...
		};
      has_claimed = false;
      has_forwarded = false;
      icpts = 12345 : nat32;
    }
  },
)</literallayout>
<simpara>And like this for a successfully claimed account:</simpara>
<literallayout class="monospaced">(
  variant {
    Ok = record {
      authenticated_principal_id = opt principal "a56gn-wnhrl-i76df-ewgfe-23jfd-dfh03-ergrg-fesr1-1jhs9-reg2o-ure";
      successfully_transferred_neurons = vec {};
      has_donated = false;
      failed_transferred_neurons = vec {};
      neuron_ids = vec { record { id = 1_234_567_890_123_456_789 : nat64;}; ...
		};
      has_claimed = true;
      has_forwarded = false;
      icpts = 12345 : nat32;
    }
  },
)</literallayout>
</section>
</section>
<section xml:id="_get_you_neuron_identifiers">
<title>Get you neuron identifiers</title>
<simpara>After you have claimed your neurons (in one step or two) you should look at your neuron identifier and keep them handy for the future.
You will need to reference them when you <xref linkend="_instruct_the_neurons_you_wish_to_unstake_to_dissolve"/>.</simpara>
<simpara>You can see your neuron identifiers in the output of the <literal>get_account</literal> of which you saw an example just above.
The neuron identifiers are the numbers that look like this: <literal>1_234_567_890_123_456_789</literal>.
You could just copy paste them from the output of <literal>get_account</literal>.</simpara>
<simpara>A better alternative is to extract the neuron identifiers more conveniently into an one-per-line output as follows. On your networked computer do:</simpara>
<programlisting language="bash" linenumbering="unnumbered">ADDR="write your legacy address here"
GTC=renrk-eyaaa-aaaaa-aaada-cai
dfx canister --network=https://ic0.app --no-wallet call $GTC get_account '("'$ADDR'")' | grep 2_024_218_412 | awk '$1=$1' RS=";" | grep = | sed -e 's/.*= //'</programlisting>
<simpara>The result should be a list of 31 or 49 neuron identifiers.
If you are not in an airgapped setup you can do <literal>ADDR=$(echo $seed | keysmith legacy-address -f -)</literal> and don&#8217;t have to type your legacy address.</simpara>
<simpara>You can query individual neurons to learn more about them such as the dissolve delay, its age, its voting power, its state (locked, dissolving, dissolved).
To do that, issue the following commands on your networked computer.
Substitute <literal>&#8230;&#8203;</literal> by the identifier of the neuron you are querying.
These commands query the governance canister.</simpara>
<programlisting language="bash" linenumbering="unnumbered">NEURON_ID=...
CANISTER=rrkah-fqaaa-aaaaa-aaaaq-cai
RESULT="$(dfx canister --network=https://ic0.app --no-wallet call $CANISTER get_neuron_info "($NEURON_ID:nat64)" --output=raw)"
didc decode -t "(Result_2)" -d ~/Downloads/nns-ifaces-0.8.0/governance.did $RESULT</programlisting>
</section>
</section>
<section xml:id="_enable_disbursal_by_passing_the_kyc_process">
<title>Enable disbursal by passing the KYC process</title>
<simpara>Before you can disburse ICPT from your dissolved genesis neuron you must pass KYC.
Note that this applies only to genesis neurons such as the ones given to seed donors.
It does not apply to neurons that you later create by staking already-liquid ICPT.</simpara>
<section xml:id="_derive_your_dfn_address">
<title>Derive your DFN address</title>
<simpara>The DFINITY Chrome extension generated a 12-word mnemonic seed phrase. From that seed phrase, an Ethereum-style address can be derived, which was referred to in the Chrome extension as the "DFN address". The KYC process requires that you submit your DFN address along with other information.</simpara>
<section xml:id="_using_keysmith">
<title>Using Keysmith</title>
<simpara>The easiest way to obtain your DFN address is to derive it from your seed phrase using Keysmith. The section <xref linkend="_derive_a_native_internet_computer_principal_from_your_ethereum_seed"/> already explained how to set up Keysmith and write your seed phrase into a file in a safe way. We assume here that you have carried out the steps at least up until that point. It is not important whether you have carried out any of the remaining steps on the way to claim your neurons. It is also not important whether you have installed the DFINITY Canister SDK. You only need Keysmith.</simpara>
<simpara>Derive your DFN address.</simpara>
<programlisting language="bash" linenumbering="unnumbered">echo $seed | keysmith legacy-address -f -</programlisting>
<simpara>The command above displays output similar to a typical Ethereum address, but without the leading <literal>0x</literal> prefix, and you will use it without the <literal>0x</literal> prefix.</simpara>
</section>
<section xml:id="_using_the_dfinity_chrome_extension">
<title>Using the DFINITY Chrome extension</title>
<simpara>Alternatively, you may have already written down your DFN address when you ran the Chrome extension to make the donation, or taken a screenshot of it. In this case, you can use the DFN address from there and you do not have to derive it from your seed phrase. The following is to remind you where it was visible in the Chrome extension.</simpara>
<simpara>On the Chrome extension’s main page there was an information button (“i” in blue circle) next to the DFN balance:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="DFN-extension-screenshot.png" contentwidth="75%"/>
</imageobject>
<textobject><phrase>Extension</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Clicking it presented a window displaying the DFN address:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="DFN-address-screenshot.png" contentwidth="75%"/>
</imageobject>
<textobject><phrase>Address</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The DFN address displayed in the Chrome extension has a 4-byte checksum at the end and the <literal>0x</literal> prefix. For our purposes here, you have to delete the last 8 characters and the prefix. For example: <literal>0x98b20cae8074067c29c07a0a4ad94346cc33ee948bdcfe41</literal> becomes <literal>98b20cae8074067c29c07a0a4ad94346cc33ee94</literal> which is 40 hex characters long.</simpara>
</section>
</section>
<section xml:id="_derive_your_principal_identifier">
<title>Derive your principal identifier</title>
<simpara>The KYC form will also ask you for your principal. Derive it with Keysmith.</simpara>
<programlisting language="bash" linenumbering="unnumbered">echo $seed | keysmith principal -f -</programlisting>
<simpara>The command above will display your principal identifier, which should look something like this: <literal>a56gn-wnhrl-i76df-ewgfe-23jfd-dfh03-ergrg-fesr1-1jhs9-reg2o-ure</literal>
You will be asked to enter your principal identifier on the KYC form.</simpara>
</section>
<section xml:id="_submit_your_information">
<title>Submit your information</title>
<simpara>To submit your information, you first go to the <link xl:href="http://kyc.dfinity.org/gtc">KYC landing page</link>.
The landing page is a frontend hosted by the DFINITY Foundation and any information entered here is not shared with the external KYC provider.</simpara>
<simpara>If the DFN address is valid, you are forwarded to the KYC main page.</simpara>
<simpara>If you are not forwarded and instead see "Address not found" then your DFN address is invalid. Please double-check the address. For troubleshooting, see the subsection below.</simpara>
<simpara>Once you are on the KYC main page, you can submit your personal identifying information (PII).
Information entered on this page will be sent directly to the KYC provider.</simpara>
</section>
<section xml:id="_troubleshooting">
<title>Troubleshooting</title>
<simpara>If you have problems with your DFN address, then you can verify it using <link xl:href="https://etherscan.io/address/0x1Be116204bb55CB61c821a1C7866fA6f94b561a5#readContract">Etherscan</link>.</simpara>
<simpara>After you connect to <link xl:href="https://etherscan.io/address/0x1Be116204bb55CB61c821a1C7866fA6f94b561a5#readContract">Etherscan</link>, scroll down to row “51. tokens”, open the dropdown form by expanding the row, paste your DFN address in the field “&lt;input&gt; (address)” and click “Query”. For the example address <literal>2d89d96b10f7a9456a9154b2f5309ee70df5bce1</literal> you will see:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="Etherscan-FDC-query.png" contentwidth="75%"/>
</imageobject>
<textobject><phrase>Etherscan</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>If you made a seed donation then you will see the token amount that the FDC calculated. If the DFN address is incorrect then it will show a token amount of 0.</simpara>
</section>
</section>
<section xml:id="_instruct_the_neurons_you_wish_to_unstake_to_dissolve">
<title>Instruct the neurons you wish to unstake to dissolve</title>
<simpara>Once you have claimed your neurons and completed the KYC process, you can start "dissolving" your neurons.</simpara>
<simpara>YOU ARE HIGHLY ENCOURAGED TO READ <link xl:href="https://medium.com/dfinity/understanding-the-internet-computers-network-nervous-system-neurons-and-icp-utility-tokens-730dab65cae8">THIS</link> BLOG POST BEFORE YOU START DISSOLVING YOUR NEURONS. THERE ARE MANY BENEFITS TO NEURON OWNERSHIP. BE SURE YOU UNDERSTAND EXACTLY WHAT YOU ARE GIVING UP BY DISSOLVING THEM. IN PARTICULAR, YOUR NEURONS A PRE-AGED AT 18-MONTHS, MEANING THAT YOUR VOTING REWARDS RECEIVE A MULTIPLIER EFFECT, WHICH YOU WILL LOSE WHEN YOUR NEURONS ENTER THE DISSOLVE STATE.</simpara>
<simpara>Dissolving a neuron is not instantaneous, but rather takes place over a period of time known as the "dissolve delay".
The dissolve delay is a parameter of the individual neuron. In general, different neurons have different dissolve delays.
When a neuron is dissolving, its dissolve delay falls over the passage of time, until either it is stopped by you, or it reaches zero.
Once the dissolve delay reaches zero, it stops falling, and only then can you instruct the neuron to disburse your ICP tokens.</simpara>
<simpara>Your neurons have dissolve delays of 0,1,2,&#8230;&#8203;,30 or 48 months.</simpara>
<simpara>To start the dissolution of one of your neurons, you must sign and send a message to the <emphasis role="strong">governance</emphasis> canister. You can accomplish this in one step on a networked computer using <literal>dfx canister call</literal>, or as two separate steps, one on an air-gapped computer using <literal>dfx canister sign</literal>, and another on a networked computer using <literal>dfx canister send</literal>. We strongly recommend the latter approach to reduce the risk of having your private key compromised.</simpara>
<section xml:id="_dissolve_in_one_step_not_recommended">
<title>Dissolve in one step (not recommended)</title>
<simpara>Verify that you can connect to the Internet Computer.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx ping https://ic0.app</programlisting>
<simpara>Recall the identifier of the neuron you want to dissolve and declare it as an environment variable.</simpara>
<programlisting language="bash" linenumbering="unnumbered">NEURON_ID=...</programlisting>
<simpara>Call the governance canister to dissolve your neuron.</simpara>
<programlisting language="bash" linenumbering="unnumbered">CANISTER=rrkah-fqaaa-aaaaa-aaaaq-cai
RESULT="$(dfx canister --network=https://ic0.app --no-wallet call $CANISTER manage_neuron "(record { id = opt record { id = $NEURON_ID:nat64 }; command = opt variant { Configure = record { operation = opt variant { StartDissolving = record {} } } } })" --output=raw)"
didc decode -t "(ManageNeuronResponse)" -d ~/Downloads/nns-ifaces-0.8.0/governance.did $RESULT</programlisting>
<simpara>Note that if you want to dissolve all of your neurons, then you must repeat the step above for each neuron identifier.</simpara>
</section>
<section xml:id="_dissolve_in_two_steps">
<title>Dissolve in two steps</title>
<section xml:id="_on_your_air_gapped_computer_2">
<title>On your air-gapped computer</title>
<simpara>Recall the identifier of the neuron you want to dissolve and declare it as an environment variable.</simpara>
<programlisting language="bash" linenumbering="unnumbered">NEURON_ID=...</programlisting>
<simpara>Sign a message to dissolve your neurons.</simpara>
<simpara>Recall the behavior of the <literal>--expire-after</literal> option to ensure that you deliver the message within the correct 5-minute window.</simpara>
<programlisting language="bash" linenumbering="unnumbered">CANISTER=rrkah-fqaaa-aaaaa-aaaaq-cai
dfx canister --network=https://ic0.app --no-wallet sign --expire-after=1h $CANISTER manage_neuron "(record { id = opt record { id = $NEURON_ID:nat64 }; command = opt variant { Configure = record { operation = opt variant { StartDissolving = record {} } } } })"</programlisting>
<simpara>The command above results in a <literal>message.json</literal> file in your current directory. You must copy that file from your air-gapped computer to your networked computer. How you do this will depend on your configuration.</simpara>
</section>
<section xml:id="_on_your_networked_computer_2">
<title>On your networked computer</title>
<simpara>Verify that you can connect to the Internet Computer.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx ping https://ic0.app</programlisting>
<simpara>Send the signed message to the governance canister to dissolve your neurons. As previously mentioned, you can only perform this action within the 5-minute window that you specified.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx canister --network=https://ic0.app --no-wallet send message.json</programlisting>
</section>
</section>
</section>
<section xml:id="_disburse_icp_from_neurons_that_are_fully_dissolved">
<title>Disburse ICP from neurons that are fully dissolved</title>
<simpara>To disburse the ICP tokens locked your neuron, you must sign and send a message to the governance canister. As mentioned in previous sections, this can be accomplished in one step or two steps, and we recommend the latter.</simpara>
<section xml:id="_disburse_in_one_step_not_recommended">
<title>Disburse in one step (not recommended)</title>
<simpara>Verify that you can connect to the Internet Computer.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx ping https://ic0.app</programlisting>
<simpara>Recall your account identifier and declare it as an environment variable.</simpara>
<programlisting language="bash" linenumbering="unnumbered">ACCOUNT_ID=$(echo $seed | keysmith account -f -)</programlisting>
<simpara>Recall the identifier of the neuron you want to dissolve and declare it as an environment variable.</simpara>
<programlisting language="bash" linenumbering="unnumbered">NEURON_ID=...</programlisting>
<simpara>Disburse the ICP tokens locked in your neuron.</simpara>
<programlisting language="bash" linenumbering="unnumbered">CANISTER=rrkah-fqaaa-aaaaa-aaaaq-cai
ACCOUNT_ID_WITHOUT_CHECKSUM_BYTES="$(printf ${ACCOUNT_ID:8} | fold -w 2 | xargs -I {} printf '%d:nat8; ' '0x{}')"
RESULT="$(dfx canister --network=https://ic0.app --no-wallet call $CANISTER manage_neuron "(record { id = opt record { id = $NEURON_ID:nat64 }; command = opt variant { Disburse = record { to_account = opt record { hash = vec { $ACCOUNT_ID_WITHOUT_CHECKSUM_BYTES } }; amount = null } } })" --output=raw)"
didc decode -t "(ManageNeuronResponse)" -d ~/Downloads/nns-ifaces-0.8.0/governance.did $RESULT</programlisting>
</section>
<section xml:id="_disburse_in_two_steps">
<title>Disburse in two steps</title>
<section xml:id="_on_your_air_gapped_computer_3">
<title>On your air-gapped computer</title>
<simpara>Recall your account identifier and declare it as an environment variable.</simpara>
<programlisting language="bash" linenumbering="unnumbered">ACCOUNT_ID=$(echo $seed | keysmith account -f -)</programlisting>
<simpara>Recall the identifier of the neuron you want to dissolve and declare it as an environment variable.</simpara>
<programlisting language="bash" linenumbering="unnumbered">NEURON_ID=...</programlisting>
<simpara>Sign a message to disburse the ICP tokens locked your neuron.</simpara>
<simpara>Recall the behavior of the <literal>--expire-after</literal> option to ensure you that you deliver the message within the correct 5-minute window.</simpara>
<programlisting language="bash" linenumbering="unnumbered">CANISTER=rrkah-fqaaa-aaaaa-aaaaq-cai
ACCOUNT_ID_WITHOUT_CHECKSUM_BYTES="$(printf ${ACCOUNT_ID:8} | fold -w 2 | xargs -I {} printf '%d:nat8; ' '0x{}')"
dfx canister --network=https://ic0.app --no-wallet sign --expire-after=1h $CANISTER manage_neuron "(record { id = opt record { id = $NEURON_ID:nat64 }; command = opt variant { Disburse = record { to_account = opt record { hash = vec { $ACCOUNT_ID_WITHOUT_CHECKSUM_BYTES } }; amount = null } } })"</programlisting>
<simpara>The command above results in a <literal>message.json</literal> file in your current directory. You must copy that file from your air-gapped computer to your networked computer. How you do this will depend on your configuration.</simpara>
</section>
<section xml:id="_on_your_networked_computer_3">
<title>On your networked computer</title>
<simpara>Verify that you can connect to the Internet Computer.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx ping https://ic0.app</programlisting>
<simpara>Send the signed message to the governance canister to disburse the ICP tokens locked your neuron. As previously mentioned, you can only perform this action within the 5-minute window that you specified.</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx canister --network=https://ic0.app --no-wallet send message.json</programlisting>
</section>
</section>
</section>
</article>