<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Glossary</title>
<date>2021-08-05</date>
</info>
<variablelist xml:id="g-actor">
<varlistentry>
<term>actor</term>
<listitem>
<simpara>An actor is a special kind of object in modern programming languages that processes messages in an isolated state, enabling them to be handled remotely and asynchronously.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-canister">
<varlistentry>
<term>canister</term>
<listitem>
<simpara>A canister is a conceptual object similar to a smart contract with a universally-unique identifier and an owner that defines the boundaries of a specific application, service, or micro-site.
A canister encapsulates all of the programming logic, public entry methods, the interface description for the provided message types, and state information for the application, service, or micro-service it describes.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-controller">
<varlistentry>
<term>controller</term>
<listitem>
<simpara>A controller is an identity that has special rights to manage the canister it controls.
For example, only a controlling identity can be used to install, upgrade, or delete the canister under its control.
You can specify the controller identity using the textual representation of a principal—often referred to as the principal identifier—associated with a user or with a canister.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-ledger">
<varlistentry>
<term>ledger</term>
<listitem>
<simpara>The Internet Computer records all transactions involving ICP tokens  in a specialized management canister, called the <emphasis role="strong">ledger canister</emphasis>.The ledger canister is a simplified parallel blockchain that runs on the Internet Computer in a subnet with other network management canisters.
The ledger canister implements a smart contract that holds <emphasis role="strong">accounts</emphasis> and <emphasis role="strong">balances</emphasis> and keeps a history of the <emphasis role="strong">transactions</emphasis> that affect accounts and balances. The transactions are recorded to track the following specific events:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Mint ICP tokens</emphasis> for accounts.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Transfer ICP tokens</emphasis> from one account to another.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Burn ICP tokens</emphasis> to eliminate them from existence.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-node">
<varlistentry>
<term>node</term>
<listitem>
<simpara>A physical computer that is a registered member of the {platform} network and running the Internet Computer replica processes.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-principal">
<varlistentry>
<term>principal</term>
<listitem>
<simpara>The first time you use the {sdk-short-name}, the <literal>dfx</literal> command-line tool creates a <literal>default</literal> developer identity for you with a public/private key pair in a PEM file. This Internet Computer developer identity is represented internally by a derived <emphasis role="strong">principal</emphasis> data type and a textual representation of the principal often referred to as your <emphasis role="strong">principal identifier</emphasis>.
The developer identity can also be used to derive an <emphasis role="strong">account identifier</emphasis>—similar to a Bitcoin or Ethereum address—to hold ICP tokens on your behalf in the Internet Computer ledger canister.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-replica">
<varlistentry>
<term>replica</term>
<listitem>
<simpara>In the context of the {platform}, a replica refers to the Internet Computer processes (for example, the <literal>replica</literal>, <literal>nodemanager</literal>, and other lower-level Internet Computer protocol processes) running on a physical computer node in the network.
For the {sdk-short-name}, you use the <literal>dfx start</literal> and <literal>dfx stop</literal> commands to start and stop the <literal>replica</literal> process locally to provide a local network for development.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-smart-contract">
<varlistentry>
<term>smart contract</term>
<listitem>
<simpara>A smart contract is software that enables trusted transactions and agreements to be carried out across a distributed, decentralized blockchain network without the need for any central authority or legal system.
With a smart contract, the terms of a transaction or agreement are written directly into lines of code that are executed on the blockchain network.
The code controls the execution, and the transactions are tamper-proof, traceable, and irreversible.
On the Internet Computer, smart contracts are deployed as <link linkend="g-canister">canisters</link>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-wallet">
<varlistentry>
<term>wallet</term>
<listitem>
<simpara>On the Internet Computer, a wallet is a specialized application that allows you to store and retrieve your digital assets.
The wallet application is implemented as a canister that runs on the Internet Computer. A wallet enables you to manage your ICP token balances, convert ICP token into cycles, and distribute cycles to your own or other users' canisters as a means for accessing or providing internet services.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="g-wasm">
<varlistentry>
<term>WebAssembly</term>
<listitem>
<simpara><link xl:href="https://webassembly.org/">WebAssembly</link> (<literal>Wasm</literal>) is a low-level computer instruction format.
Because WebAssembly defines a portable,open-standard, binary format that abstracts cleanly over most modern computer hardware, it is broadly supported for programs that run on the internet.
Programs written in Motoko are compiled to WebAssembly code for execution on Internet Computer replicas.</simpara>
</listitem>
</varlistentry>
</variablelist>
</article>