---
date: 2021-08-05
title: Add a stylesheet
---

Cascading stylesheets represent one of the most common ways to customize
the user experience for an application. This tutorial illustrates how to
add a stylesheet when you use React to create a new front-end for your
project. If you already know how to add cascading stylesheets (CSS) to a
React-based project, you can skip this tutorial.

::: note
This tutorial illustrates using the React framework to manage the
Document Object Model (DOM) for your canister. Because React has its own
custom DOM syntax, you need to modify the webpack configuration to
compile the front-end code, which is written in JSX. For more
information about learning to use React and JSX, see [Getting
started](https://reactjs.org/docs/getting-started.html) on the [React
website](https://reactjs.org/).
:::

# Before you begin {#_before_you_begin}

Before starting the tutorial, verify the following:

-   You have `node.js` installed for front-end development and can
    install packages using `npm install` in your project. For
    information about installing node for your local operating system
    and package manager, see the [Node](https://nodejs.org/en/) website.

-   You have downloaded and installed the {sdk-short-name} package as
    described in [Download and
    install](../../quickstart/local-quickstart.xml#download-and-install).

-   You have installed the Visual Studio Code plugin for Motoko as
    described in [Install the language editor
    plug-in](../../quickstart/local-quickstart.xml#install-vscode) if
    you are using Visual Studio Code as your IDE.

-   You have stopped any Internet Computer network processes running on
    the local computer.

::: note
Because of significant changes to the handling of HTTP requests and
front-end assets, this tutorial requires you to use the {sdk-short-name}
version `0.7.0` or later. For an overview of what's changed, see this
[article](../../http-middleware.xml).
:::

# Create a new project {#_create_a_new_project}

To create a new project directory for your custom front-end application:

1.  Open a terminal shell on your local computer, if you don't already
    have one open.

2.  Change to the folder you are using for your Internet Computer
    projects, if you are using one.

3.  Verify that you have `node.js` installed locally, if necessary.

4.  Create a new project by running the following command:

    ``` bash
    dfx new contacts
    ```

5.  Change to your project directory by running the following command:

    ``` bash
    cd contacts
    ```

# Install the React framework {#_install_the_react_framework}

if you've never used React before, you might want to explore the [Intro
to React](https://reactjs.org/tutorial/tutorial.html) tutorial or the
[React website](https://reactjs.org/) before editing the front-end code.

To install required framework modules:

1.  Install the React module by running the following command:

    ``` bash
    npm install --save react react-dom
    ```

2.  Install the required TypeScript language compiler loader by running
    the following command:

    ``` bash
    npm install --save-dev typescript ts-loader
    ```

3.  Install the required style loaders by running the following command:

    ``` bash
    npm install --save-dev style-loader css-loader
    ```

    If the `npm install` command reports a vulnerability, you might also
    want to run the `npm audit fix` command to attempt to fix the
    vulnerability reported before continuing.

    ::: note
    As an alternative to installing these modules, you can edit the
    default `package.json` file to add dependencies for your project.
    :::

        Unresolved directive in my-contacts.adoc - include::example$add-stylesheet-package.json[]

    The version of the JavaScript agent in this example `package.json`
    file is `0.9.2`. In most cases, however, you would want to use the
    latest version of the agent available. When you create a new
    project, the `dfx new` command automatically retrieves the latest
    version of the JavaScript agent for you. You can also manually
    retrieve the latest version after creating a project by running the
    `npm install --save @dfinity/agent` command.

# Modify the default program {#_modify_the_default_program}

For this tutorial, you are going to modify the main program to with code
that allows you to store and look up contact information.

To modify the default program:

1.  Open the `src/contacts/main.mo` file in a text editor and delete the
    existing content.

2.  Copy and paste the following sample code into the file:

    ``` motoko
    Unresolved directive in my-contacts.adoc - include::example$mycontacts/contacts.mo[]
    ```

3.  Save your changes and close the `main.mo` file to continue.

# Modify the front-end files {#_modify_the_front_end_files}

You are now ready to create a new front-end for your program.

1.  Open the webpack configuration file (`webpack.config.js`) in a text
    editor.

2.  Modify the front-end entry to replace the default index.html with
    index.jsx.

    ``` js
    entry: {
      // The frontend.entrypoint points to the HTML file for this build, so we need
      // to replace the extension to `.js`.
      index: path.join(__dirname, asset_entry).replace(/\.html$/, ".jsx"),
    },
    ```

3.  Locate the commented example for the `module` key above the
    `plugins` section, then uncomment the following lines:

    ``` js
    module: {
      rules: [
        { test: /\.(js|ts)x?$/, loader: "ts-loader" },
        { test: /\.css$/, use: ['style-loader','css-loader'] }
      ]
    },
    ```

    These settings enable your program to use the `ts-loader` compiler
    and to import CSS files.

4.  Save your changes and close the `webpack.config.js` file to
    continue.

5.  Create a new file named `tsconfig.json` in the root directory for
    your project.

6.  Open the `tsconfig.json` file in a text editor, then copy and paste
    the following into the file:

    ``` json
    Unresolved directive in my-contacts.adoc - include::example$sample-tsconfig.json[]
    ```

7.  Save your changes and close the `tsconfig.json` file to continue.

# Add a stylesheet to your project {#_add_a_stylesheet_to_your_project}

You are now ready to create a new cascading stylesheet and add it to
your project.

To add a stylesheet:

1.  Change to the `src/contacts_assets/assets` directory.

    ``` bash
    cd src/contacts_assets/assets/
    ```

2.  Open the `main.css` file in a text editor and delete the existing
    content.

3.  Define some style properties for the front-end.

    For example, copy and paste the following sample styles into the
    file:

    ``` bash
    Unresolved directive in my-contacts.adoc - include::example$mycontacts/mycontacts.css[]
    ```

4.  Save your changes and close the `main.css` file to continue.

5.  Change to the `src/contacts_assets/src` directory.

    ``` bash
    cd ../src
    ```

6.  Open the default `index.js` file in a text editor and delete the
    existing content.

7.  Copy and paste the following sample code into the `index.js` file:

    ``` react
    Unresolved directive in my-contacts.adoc - include::example$mycontacts/mod-index.jsx[]
    ```

8.  Rename the modified `index.js` file as `index.jsx` by running the
    following command:

    ``` bash
    mv index.js index.jsx
    ```

9.  Open the default `src/contacts_assets/src/index.html` file in a text
    editor, then replace `main.css` as the stylesheet file name with
    `mycontacts.css` and update the `body` contents with
    `<div id="contacts"></div>`.

    For example:

    ``` bash
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <title>contacts</title>
        <base href="/" />

        <link type="text/css" rel="stylesheet" href="main.css" />
      </head>
      <body>
        <main>
          <div id="contacts"></div>
        </main>
      </body>
    </html>
    ```

10. Navigate back to the root of your project directory.

    For example:

    ``` bash
    cd ../../..
    ```

# Start the local network {#_start_the_local_network}

Before you can build the `contacts` project, you need to connect to the
Internet Computer network either running locally in your development
environment or running remotely on a subnet that you can access.

To start the network locally:

1.  Open a new terminal window or tab on your local computer.

2.  Start the Internet Computer network on your local computer by
    running the following command:

    ``` bash
    dfx start --background
    ```

    After the local Internet Computer network completes its startup
    operations, you can continue to the next step.

# Register, build, and deploy the application {#_register_build_and_deploy_the_application}

After you connect to the Internet Computer network running locally in
your development environment, you can register, build, and deploy your
application locally.

To deploy the application:

1.  Check that you are still in the root directory for your project, if
    needed.

2.  Register, build, and deploy your application by running the
    following command:

    ``` bash
    dfx deploy
    ```

    The `dfx deploy` command output displays information about the
    operations it performs.

    Keep in mind that because you are running the Internet Computer
    locally, the identifiers displayed when you run the `dfx deploy`
    command are only valid on the local network.

    To deploy canisters on an external Internet Computer network, you
    must connect to that network using the `--network` command-line
    option and a specific network name or address to register
    identifiers on that network. For example, to deploy on the Internet
    Computer using the reserve network alias `ic`, you would run a
    command similar the following:

    ``` bash
    dfx deploy --network=ic
    ```

3.  Start the Webpack development server:

    ``` bash
    npm start
    ```

# View the front-end {#_view_the_front_end}

You can now access the front-end for the `contacts` program by entering
the canister identifier for the assets canister in a browser.

To view the front-end:

1.  Open a browser and navigate to the `http://localhost:8080`.

2.  Verify that you are prompted with a **My Contacts** form.

    For example:

    ![Sample front-end](mycontacts-form.png)

3.  Create one or more test records by entering text in the Name,
    Address, and Email input fields and a number in the Phone input
    field, then clicking **Add Contact**.

4.  Clear the form fields and type a contact name in the Lookup name
    field, then click **Lookup** to see the stored contact information.

    Keep in mind that the **Lookup name** you type must be an exact
    match for the name of a contact you added.

# Modify the stylesheet and test your changes {#_modify_the_stylesheet_and_test_your_changes}

After viewing the Contacts application, you might want to make some
changes.

To change stylesheet properties:

1.  Open the `src/contacts_assets/public/mycontacts.css` file in a text
    editor and modify its style settings.

    For example, you might want to change the background color or style
    the input form.

    You should see the changes update immediately in your open browser
    window.

# Modify the front-end or back-end code {#_modify_the_front_end_or_back_end_code}

If you want to explore further, you might want to experiment with
modifying the front-end or back-end code for this tutorial. For example,
you might want try modifying the tutorial to do the following:

-   Change the front-end code to clear the input fields after adding a
    new contact, for example, as part of an `onClick` event.

-   Change the Motoko program functions to do partial instead of exact
    string matching on the `Name` field. (You will need to run
    `dfx deploy` to test your changes on the local replica)

-   Change the Motoko program to allow lookups based on a different
    field.

# Stop the local network {#_stop_the_local_network}

After you finish experimenting with your program, you can stop the local
Internet Computer network so that it doesn't continue running in the
background.

To stop the local network:

1.  In the terminal that displays your webpack dev server, press
    Control-C to interrupt the development server.

2.  Stop the Internet Computer network by running the following command:

    ``` bash
    dfx stop
    ```
