; The "root type" of the CDDL file is a hack: We want to define multiple
; types in one file (to shared common definitions), but CDDL requires a single
; root type. So we just list the types defined here. This is a common CDDL idiom.
start =
  async-request /
  sync-request /
  response

; common wrappers

tagged<t> = #6.55799(t) ; the CBOR tag

envelope<t> = tagged<{
  content: t
  ? sender_pubkey: pubkey
  ? sender_delegation: [*4 signed-delegation]
  ? sender_sig: signature
}>


; A request as submitted to /api/v1/submit
async-request = envelope<async-content>
async-content =
  call-request

call-request = {
  request_type: "call"
  ? nonce : bytes
  ingress_expiry : timestamp
  sender : principal
  canister_id : principal
  method_name : text
  arg : bytes
}

; A request as submitted to /api/v1/read
sync-request = envelope<sync-content>
sync-content =
  read-state-request /
  query-request

read-state-request = {
  request_type: "read_state"
  ? nonce : bytes
  ingress_expiry : timestamp
  sender : principal
  paths: [* state-path]
}

state-path = [* path-label]
path-label = bytes

query-request = {
  request_type: "query"
  ? nonce : bytes
  ingress_expiry : timestamp
  sender : principal
  canister_id : principal
  method_name : text
  arg : bytes
}

; The response, as returned from /api/v1/read

response = tagged<response-content>
response-content =
  read-state-response /
  query-response

read-state-response = {
  certificate: bytes
}

query-response = {
  status: "replied"
  reply: call-reply
  //
  status: "rejected"
  reject_code: unsigned
  reject_message: text
}

call-reply = {
  arg : bytes
}

signed-delegation = {
  delegation: {
    pubkey: bytes
    expiration: timestamp
    ? targets: [* principal]
  }
  signature: bytes
}

; some common data types

principal = bytes .size (0..29)

pubkey = bytes
signature = bytes
timestamp = unsigned
