<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Add front-end assets</title>
<date>2021-08-05</date>
</info>
<simpara>The tutorials introduced a few basic approaches to building a front-end user interface for your projects.
For example, the tutorials demonstrated:</simpara>
<itemizedlist>
<listitem>
<simpara>Using <link xl:href="tutorials/hello-location.xml#candid-ui">Candid</link> as a bare-bones interface to expose and test the functions in a canister.</simpara>
</listitem>
<listitem>
<simpara>Using <link xl:href="tutorials/explore-templates.xml#default-frontend">raw HTML and JavaScript</link> to display a simple HTML entry page.</simpara>
</listitem>
<listitem>
<simpara>Using <link xl:href="tutorials/custom-frontend.xml">React and compiled JavaScript</link> to embed HTML attributes and elements directly in a page.</simpara>
</listitem>
<listitem>
<simpara>Using <link xl:href="tutorials/my-contacts.xml">React and TypeScript</link> to import CSS properties from an external file.</simpara>
</listitem>
</itemizedlist>
<simpara>This section takes a closer look at the default front-end template, front-end configuration options, and using other frameworks to build the user interface for your projects.</simpara>
<section xml:id="_how_the_default_templates_are_used">
<title>How the default templates are used</title>
<simpara>As you might have noticed in the tutorials, projects include template <literal>index.js</literal> and <literal>webpack.config.js</literal> files.</simpara>
<simpara>By default, the <literal>index.js</literal> file imports an agent that is located in <literal>src/declarations</literal> folder. That directory will be generated by <literal>dfx</literal> when you run <literal>dfx deploy</literal>, either locally or when deploying to the IC.</simpara>
<simpara>That generated code will look like this:</simpara>
<programlisting language="js" linenumbering="unnumbered">import { Actor, HttpAgent } from "@dfinity/agent";

// Imports candid interface
import { idlFactory } from './hello.did.js';
// CANISTER_ID is replaced by webpack based on node enviroment
export const canisterId = process.env.HELLO_CANISTER_ID;

/**
 *
 * @param {string | Principal} canisterId Canister ID of Agent
 * @param {{agentOptions?: import("@dfinity/agent").HttpAgentOptions; actorOptions?: import("@dfinity/agent").ActorConfig}} [options]
 * @return {import("@dfinity/agent").ActorSubclass&lt;import("./hello.did.js")._SERVICE&gt;}
 */
export const createActor = (canisterId, options) =&gt; {
  const agent = new HttpAgent({ ...options?.agentOptions });

  // Fetch root key for certificate validation during development
  if(process.env.NODE_ENV !== "production") agent.fetchRootKey();

  // Creates an actor with using the candid interface and the HttpAgent
  return Actor.createActor(idlFactory, {
    agent,
    canisterId,
    ...options?.actorOptions,
  });
};

/**
 * A ready-to-use agent for the hello canister
 * @type {import("@dfinity/agent").ActorSubclass&lt;import("./hello.did.js")._SERVICE&gt;}
 */
export const hello = createActor(canisterId);</programlisting>
<simpara>Then, if you return to <literal>index.js</literal>, you can see see that it takes the generated actor, and uses it to make a call to the <literal>hello</literal> canister&#8217;s <literal>greet</literal> method:</simpara>
<programlisting language="js" linenumbering="unnumbered">import { hello } from "../../declarations/hello";

document.getElementById("clickMeBtn").addEventListener("click", async () =&gt; {
  const name = document.getElementById("name").value.toString();
  // Interact with hello actor, calling the greet method
  const greeting = await hello.greet(name);

  document.getElementById("greeting").innerText = greeting;
});</programlisting>
<simpara>In many projects, you will be able to ignore the code under <literal>declarations</literal> for the most part, and make your changes in <literal>hello_assets/src</literal>. However, if your project has additional requirements, continue reading below.</simpara>
<section xml:id="_modifying_the_webpack_configuration">
<title>Modifying the webpack configuration</title>
<simpara>Because webpack is a popular and highly-configurable module bundler for JavaScript-based applications, new projects create a default <literal>webpack.config.js</literal> file that makes it easy to add the specific modules—such as <literal>react</literal> and <literal>markdown</literal>—that you want to use.</simpara>
<simpara>If you review the code in the template <literal>webpack.config.js</literal> file, you see that it infers canister ID&#8217;s from your <literal>.dfx/local/canister_ids.json</literal> for local development, and from <literal>'./canister_ids.json'</literal> for any other environments you configure. It decides which network to use based on a <literal>DFX_NETWORK</literal> proccess variable, or based on whether <literal>NODE_ENV</literal> is set to <literal>"production"</literal>.</simpara>
<simpara>You can see these steps in the following code block:</simpara>
<programlisting language="js" linenumbering="unnumbered">let localCanisters, prodCanisters, canisters;

try {
  localCanisters = require(path.resolve(".dfx", "local", "canister_ids.json"));
} catch (error) {
  console.log("No local canister_ids.json found. Continuing production");
}

function initCanisterIds() {
  try {
    prodCanisters = require(path.resolve("canister_ids.json"));
  } catch (error) {
    console.log("No production canister_ids.json found. Continuing with local");
  }

  const network =
    process.env.DFX_NETWORK ||
    (process.env.NODE_ENV === "production" ? "ic" : "local");

  canisters = network === "local" ? localCanisters : prodCanisters;

  for (const canister in canisters) {
    process.env[canister.toUpperCase() + "_CANISTER_ID"] =
      canisters[canister][network];
  }
}
initCanisterIds();</programlisting>
</section>
<section xml:id="_entry_and_output_configuration">
<title>Entry and output configuration</title>
<simpara>In many cases, you can use the default <literal>webpack.config.js</literal> file as-is, without any modification, or you can add plug-ins, modules, and other custom configuration to suit your needs.
The specific changes you make to the <literal>webpack.config.js</literal> configuration largely depend on the other tools and frameworks you want to use.</simpara>
<simpara>For example, if you have experimented with the <link xl:href="tutorials/custom-frontend.xml">Customize the front-end</link> or <link xl:href="tutorials/my-contacts.xml">Add a stylesheet</link> front-end tutorials, you might have modified the following section to work with React JavaScript:</simpara>
<programlisting language="js" linenumbering="unnumbered">    module: {
      rules: [
        { test: /\.(ts|tsx|jsx)$/, loader: "ts-loader" },
        { test: /\.css$/, use: ['style-loader','css-loader'] }
      ]
    }
  };
}</programlisting>
<simpara>If your application does not use <literal>dfx</literal> to run your build script, you can provide the variables yourself. For example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">DFX_NETWORK=staging NODE_ENV=production HELLO_CANISTER_ID=rrkah... npm run build</programlisting>
</section>
<section xml:id="troubleshoot-node">
<title>Ensuring node is available in a project</title>
<simpara>Because projects rely on webpack to provide the framework for the default front-end, you must have <literal>node.js</literal> installed in your development environment and accessible in the project directory.</simpara>
<itemizedlist>
<listitem>
<simpara>If you want to develop your project without using the default webpack configuration and canister aliases, you can remove the <literal>assets</literal> canister from the <literal>dfx.json</literal> file or build your project using a specific canister name. For example, you can choose to build only the hello program without front-end assets by running the following command:</simpara>
<literallayout class="monospaced">dfx build hello</literallayout>
</listitem>
<listitem>
<simpara>If you are using the default webpack configuration and running <literal>dfx build</literal> fails, you should try running <literal>npm install</literal> in the project directory then re-running <literal>dfx build</literal>.</simpara>
</listitem>
<listitem>
<simpara>If running <literal>npm install</literal> in the project directory doesn&#8217;t fix the issue, you should check the configuration of the <literal>webpack.config.js</literal> file for syntax errors.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_using_other_modules_with_the_react_framework">
<title>Using other modules with the React framework</title>
<simpara>Several tutorials and sample projects in the <link xl:href="https://github.com/dfinity/examples">examples</link> repository illustrate how to add React modules using the <literal>npm install</literal> command.
You can use these modules to construct the user interface components you want to use in your project.
For example, you might run the following command to install the <literal>react-router</literal> module:</simpara>
<programlisting language="bash" linenumbering="unnumbered">npm install --save react react-router-dom</programlisting>
<simpara>You could then use the module to construct a navigation component similar to the following:</simpara>
<programlisting language="react" linenumbering="unnumbered">import React from 'react';
import { NavLink } from 'react-router-dom';

const Navigation = () =&gt; {
  return (
    &lt;nav className="main-nav"&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;NavLink to="/myphotos"&gt;Remember&lt;/NavLink&gt;&lt;/li&gt;
        &lt;li&gt;&lt;NavLink to="/myvids"&gt;Watch&lt;/NavLink&gt;&lt;/li&gt;
        &lt;li&gt;&lt;NavLink to="/audio"&gt;Listen&lt;/NavLink&gt;&lt;/li&gt;
        &lt;li&gt;&lt;NavLink to="/articles"&gt;Read&lt;/NavLink&gt;&lt;/li&gt;
        &lt;li&gt;&lt;NavLink to="/contribute"&gt;Write&lt;/NavLink&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
  );
}

export default Navigation;</programlisting>
</section>
<section xml:id="_iterate_faster_using_webpack_dev_server">
<title>Iterate faster using webpack-dev-server</title>
<simpara>Starting with dfx 0.7.7, we now provide you with webpack dev-server in our <literal>dfx new</literal> starter.</simpara>
<simpara>The webpack development server—<literal>webpack-dev-server</literal>—provides in-memory access to the webpack assets, enabling you to make changes and see them reflected in the browser right away using live reloading.</simpara>
<simpara>To take advantage of the <literal>webpack-dev-server</literal>:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Create a new project and change to your project directory.</simpara>
</listitem>
<listitem>
<simpara>Start the {IC} locally, if necessary, and deploy as you normally would, for example, by running the <literal>dfx deploy</literal> command.</simpara>
</listitem>
<listitem>
<simpara>Start the webpack development server by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">npm start</programlisting>
</listitem>
<listitem>
<simpara>Open a web browser and navigate to the asset canister for your application using port 8080.</simpara>
<simpara>For example:</simpara>
<literallayout class="monospaced">http://localhost:8080</literallayout>
</listitem>
<listitem>
<simpara>Open a new terminal window or tab and navigate to your project directory.</simpara>
</listitem>
<listitem>
<simpara>Open the <literal>index.js</literal> file for your project in a text editor and make changes to the content.</simpara>
<simpara>For example, you might add an element to the page using JavaScript:</simpara>
<simpara>document.body.onload = addElement;</simpara>
<programlisting language="js" linenumbering="unnumbered">document.body.onload = addElement;

function addElement () {
  // create a new div element
  const newDiv = document.createElement("div");

  // and give it some content
  const newContent = document.createTextNode("Test live page reloading!");

  // add the text node to the newly created div
  newDiv.appendChild(newContent);

  // add the newly created element and its content into the DOM
  const currentDiv = document.getElementById("div1");
  document.body.insertBefore(newDiv, currentDiv);
}</programlisting>
</listitem>
<listitem>
<simpara>Save your changes to the <literal>index.js</literal> file but leave the editor open to continue making changes.</simpara>
</listitem>
<listitem>
<simpara>Refresh the browser or wait for it to refresh on its own to see your change.</simpara>
<simpara>When you are done working on the front-end for your project, you can stop the webpack development server by pressing Control-C.</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="_using_other_frameworks">
<title>Using other frameworks</title>
<simpara>You may want to use a bundler other than webpack. Per-bundler instructions are not ready yet, but if you are familiar with your bundler, the following steps should get you going:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Remove the <literal>copy:types</literal>, <literal>prestart</literal>, and <literal>prebuild</literal> scripts from <literal>package.json</literal></simpara>
</listitem>
<listitem>
<simpara>Run <literal>dfx deploy</literal> to generate the local bindings for your canisters</simpara>
</listitem>
<listitem>
<simpara>Copy the generated bindings to a directory where you would like to keep them</simpara>
</listitem>
<listitem>
<simpara>Modify <literal>declarations/&lt;canister_name&gt;/index.js</literal> and replace <literal>process.env.&lt;CANISTER_NAME&gt;_CANISTER_ID</literal> with the equivalent pattern for environment variables for your bundler</simpara>
<itemizedlist>
<listitem>
<simpara>Alternately hardcode the canister ID if that is your preferred workflow</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Commit the declarations and import them in your codebase</simpara>
</listitem>
</orderedlist>
</section>
</article>