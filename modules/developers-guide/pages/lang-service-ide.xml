<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="1"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Language server and development client support</title>
<date>2021-08-05</date>
<author>
<personname>
<firstname>December 2019 (Alpha 3)</firstname>
</personname>
</author>
<authorinitials>D</authorinitials>
</info>
<simpara>The <link xl:href="https://microsoft.github.io/language-server-protocol">Language Server Protocol (LSP)</link>—originally developed by Microsoft—provides a common language to add broadly-useful features like automatic code complete, GoTo definition, and hover-over tool tips
to development tools.
Using the Language Server Protocol, a language server enables standardized inter-process communication between a programming language and any editor, integrated development environment (IDE), or client endpoint tool.</simpara>
<simpara>Because the Language Server Protocol (LSP) standardizes the protocol for how language-specific servers and development tools communicate, a single language server can be re-used in multiple development tools with minimal effort.</simpara>
<section xml:id="_adding_a_language_server_for_motoko">
<title>Adding a language server for Motoko</title>
<simpara>With the {sdk-short-name}, you can add a language server for Motoko to your editor or development environment client by invoking the <literal>dfx _language-service</literal> programmatically when you open Motoko programs in an editor or development environment configured to recognize the language server.
You can use any editor or integrated development environment that supports the Language Server Protocol to invoke the <literal>dfx _language-service</literal> programmatically. Once invoked, the language server ensures that your development environment reports Motoko compiler errors and provides code completion and refactoring tools.</simpara>
<simpara>For example, if you use Visual Studio Code (VSCode) or Emacs as your development environment, you can install a plugin extension that enables those editors to automatically invoke the Motoko language server.</simpara>
<note>
<simpara>Only the Visual Studio Code (VSCode) plugin extension is currently available for Motoko.
For information about installing the plugin, see <link xl:href="../quickstart/local-quickstart.xml#install-vscode">Install the language editor plug-in</link>.</simpara>
</note>
</section>
<section xml:id="_invoking_the_language_service_manually">
<title>Invoking the language service manually</title>
<simpara>Although it is extremely rare that you would start the Motoko language server directly in a terminal shell. it is possible to do so by running the following command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx _language-service --force-tty</programlisting>
<simpara>Note that you can only run this command from within a project directory.
For example, if your project name is <literal>hello_world</literal>, your current working directory must be the <literal>hello_world</literal> top-level project directory or one of its subdirectories.</simpara>
<section xml:id="_basic_usage">
<title>Basic usage</title>
<programlisting language="bash" linenumbering="unnumbered">dfx _language-service [canister_name] [flag]</programlisting>
</section>
<section xml:id="_flags">
<title>Flags</title>
<simpara>You can use the following optional flags with the <literal>dfx _language-service</literal> command.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Flag</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>--force-tty</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Starts the the Motoko language server directly in a terminal shell.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>-h</literal>, <literal>--help</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Displays usage information.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>-V</literal>, <literal>--version</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Displays version information.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_arguments">
<title>Arguments</title>
<simpara>You can specify the following arguments for the <literal>dfx _language-service</literal> command.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="100%"?>
<?dbfo table-width="100%"?>
<?dblatex table-width="100%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="153*"/>
<colspec colname="col_2" colwidth="272*"/>
<thead>
<row>
<entry align="left" valign="top">Argument</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>canister_name</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specifies the name of the canister that the compiler should monitor.
If you specify a canister name, the name should match a canister name you have configured in the <literal>dfx.json</literal> configuration file for your project.
If you don’t specify a canister name, the first canister specified in the <literal>dfx.json</literal> configuration file is used as the target.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_examples">
<title>Examples</title>
<simpara>If you want to use an integrated development environment to develop code for the canister <literal>my-canister</literal> you should have the development environment invoke the language service using the following <literal>dfx _language-service</literal> command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">dfx _language-service my-canister</programlisting>
</section>
</section>
</article>